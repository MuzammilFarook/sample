CSV/PDF Export : https://aboullaite.me/spring-boot-excel-csv-and-pdf-view-example/
Multiple rows insert thymeleaf-springboot:
https://stackoverflow.com/questions/47839700/how-to-submit-table-data-in-spring-thymeleaf
$2a$10$lnRVnNAAt3YtGmwen7eSreKWjrEPiYSbjyPZDkUGyTAgmRt8dXBmu
CSV to db batch:
http://michaelcgood.com/spring-batch-csv-processing/
https://stackoverflow.com/questions/47442909/spring-batch-to-upload-a-csv-file-and-insert-into-database-accordingly
Excel to db - Not batch:
http://lvtutorial.com/spring-mvc/how-to-upload-sheet-excel-into-database-using-spring-mvc.html
INVOICE:
https://bootsnipp.com/snippets/featured/bs4-clean-amp-simple-invoice-template
Profile:
https://www.bootply.com/bJLwPlYKna
MAPS:
https://jsfiddle.net/upsidown/1svw299r/
Excellent data table:
https://jsfiddle.net/julmot/buh9h2r8/
Types of Search:
1.Overall Class level - Pass%/Fail% - possibility of graph - https://careydevelopment.us/2017/07/01/add-charts-spring-boot-app-highchart/
2.Each class - all subjects - full page-data table - Pass%/Fail% - possibility of graph - https://careydevelopment.us/2017/07/01/add-charts-spring-boot-app-highchart/
3.Each class - per subject - Data table
4. Student wise data table - possibility of graph - https://careydevelopment.us/2017/07/01/add-charts-spring-boot-app-highchart/
Charts:
<dependency>
			<groupId>com.googlecode.charts4j</groupId>
			<artifactId>charts4j</artifactId>
			<version>1.3</version>
		</dependency>
Controller
@RequestMapping("/gcharts")
public class GglPieChart {
	
	@RequestMapping(value = "/piechart", method = RequestMethod.GET)
	public String drawPieChart(ModelMap model)
	{
		Slice s1 = Slice.newSlice(33, Color.newColor("CACACA"), "Mac", "Mac");
		Slice s2 = Slice.newSlice(33, Color.newColor("DF7417"), "Window",
				"Window");
		Slice s3 = Slice.newSlice(33, Color.newColor("951800"), "Linux",
				"Linux");
		Slice s4 = Slice.newSlice(1, Color.newColor("01A1DB"), "Others",
				"Others");

		PieChart pieChart = GCharts.newPieChart(s1, s2, s3, s4);
		pieChart.setTitle("Google Pie Chart", Color.BLACK, 15);
		pieChart.setSize(720, 360);
		pieChart.setThreeD(true);
		
		Plot plot = Plots.newPlot(Data.newData(100, 10, 20, 30, 40, 50, 60, 70, 80, 90));
		//plot.
	       plot.addShapeMarkers(Shape.SQUARE, Color.BLUE, 12);
		
		BarChart barChart = GCharts.newBarChart(plot);
		barChart.setTitle("Muzammil", Color.BLACK, 15);
		barChart.setSize(500, 500);
		barChart.setDataStacked(true);
		model.addAttribute("barUrl", barChart.toURLString());

		model.addAttribute("pieUrl", pieChart.toURLString());
System.out.println("All done");
		return "display";
	}

}
UI:
<img alt="Google Pie Chart" th:attr="src=${pieUrl}"/>
Image:
https://stackoverflow.com/questions/33839309/how-to-show-image-from-h2-database-to-thymeleaf
https://stackoverflow.com/questions/23441527/how-do-i-show-blob-image-tag-on-html-page-using-spring-mvc
http://www.baeldung.com/spring-mvc-image-media-data
=============================================



/*
 * The Alphanum Algorithm is an improved sorting algorithm for strings
 * containing numbers.  Instead of sorting numbers in ASCII order like
 * a standard sort, this algorithm sorts numbers in numeric order.
 *
 * The Alphanum Algorithm is discussed at http://www.DaveKoelle.com
 *
 * Released under the MIT License - https://opensource.org/licenses/MIT
 *
 * Copyright 2007-2017 David Koelle
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

/**
 * This is an updated version with enhancements made by Daniel Migowski,
 * Andre Bogus, and David Koelle. Updated by David Koelle in 2017.
 *
 * To use this class:
 *   Use the static "sort" method from the java.util.Collections class:
 *   Collections.sort(your list, new AlphanumComparator());
 */
public class AlphanumComparator implements Comparator<String>
{
    private final boolean isDigit(char ch)
    {
        return ((ch >= 48) && (ch <= 57));
    }

    /** Length of string is passed in for improved efficiency (only need to calculate it once) **/
    private final String getChunk(String s, int slength, int marker)
    {
        StringBuilder chunk = new StringBuilder();
        char c = s.charAt(marker);
        chunk.append(c);
        marker++;
        if (isDigit(c))
        {
            while (marker < slength)
            {
                c = s.charAt(marker);
                if (!isDigit(c))
                    break;
                chunk.append(c);
                marker++;
            }
        } else
        {
            while (marker < slength)
            {
                c = s.charAt(marker);
                if (isDigit(c))
                    break;
                chunk.append(c);
                marker++;
            }
        }
        return chunk.toString();
    }

    public int compare(String s1, String s2)
    {
    	if ((s1 == null) || (s2 == null)) 
    	{
    		return 0;
    	}

        int thisMarker = 0;
        int thatMarker = 0;
        int s1Length = s1.length();
        int s2Length = s2.length();

        while (thisMarker < s1Length && thatMarker < s2Length)
        {
            String thisChunk = getChunk(s1, s1Length, thisMarker);
            thisMarker += thisChunk.length();

            String thatChunk = getChunk(s2, s2Length, thatMarker);
            thatMarker += thatChunk.length();

            // If both chunks contain numeric characters, sort them numerically
            int result = 0;
            if (isDigit(thisChunk.charAt(0)) && isDigit(thatChunk.charAt(0)))
            {
                // Simple chunk comparison by length.
                int thisChunkLength = thisChunk.length();
                result = thisChunkLength - thatChunk.length();
                // If equal, the first different number counts
                if (result == 0)
                {
                    for (int i = 0; i < thisChunkLength; i++)
                    {
                        result = thisChunk.charAt(i) - thatChunk.charAt(i);
                        if (result != 0)
                        {
                            return result;
                        }
                    }
                }
            } 
            else
            {
                result = thisChunk.compareTo(thatChunk);
            }

            if (result != 0)
                return result;
        }

        return s1Length - s2Length;
    }
    
    /** 
     * Shows an example of how the comparator works. 
     * Feel free to delete this in your own code!
     */
    public static void main(String[] args) {
    	List<String> values = Arrays.asList("dazzle2", "dazzle10", "dazzle1", "dazzle2.7", "dazzle2.10", "2", "10", "1", "EctoMorph6", "EctoMorph62", "EctoMorph7");
    	System.out.println(values.stream().sorted(new AlphanumComparator()).collect(Collectors.joining(" ")));
    }
}
====================
https://wetransfer.com/downloads/8db8aef6799626f55a4e3deb227955b320181023074922/6771fc03db3d58d525781dad9eb34f0020181023074922/28d6a5?utm_campaign=WT_email_tracking&utm_content=general&utm_medium=download_button&utm_source=notify_recipient_email
