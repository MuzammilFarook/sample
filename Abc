JSFIDDLE MAGICS:
https://lab.hakim.se/trail/03/
https://codepen.io/rachsmith/pen/LpZbmZ

CSV/PDF Export : https://aboullaite.me/spring-boot-excel-csv-and-pdf-view-example/
Multiple rows insert thymeleaf-springboot:
https://stackoverflow.com/questions/47839700/how-to-submit-table-data-in-spring-thymeleaf
$2a$10$lnRVnNAAt3YtGmwen7eSreKWjrEPiYSbjyPZDkUGyTAgmRt8dXBmu
CSV to db batch:
http://michaelcgood.com/spring-batch-csv-processing/
https://stackoverflow.com/questions/47442909/spring-batch-to-upload-a-csv-file-and-insert-into-database-accordingly
Excel to db - Not batch:
http://lvtutorial.com/spring-mvc/how-to-upload-sheet-excel-into-database-using-spring-mvc.html
INVOICE:
https://bootsnipp.com/snippets/featured/bs4-clean-amp-simple-invoice-template
Profile:
https://www.bootply.com/bJLwPlYKna
MAPS:
https://jsfiddle.net/upsidown/1svw299r/
Excellent data table:
https://jsfiddle.net/julmot/buh9h2r8/
Types of Search:
1.Overall Class level - Pass%/Fail% - possibility of graph - https://careydevelopment.us/2017/07/01/add-charts-spring-boot-app-highchart/
2.Each class - all subjects - full page-data table - Pass%/Fail% - possibility of graph - https://careydevelopment.us/2017/07/01/add-charts-spring-boot-app-highchart/
3.Each class - per subject - Data table
4. Student wise data table - possibility of graph - https://careydevelopment.us/2017/07/01/add-charts-spring-boot-app-highchart/
Charts:
<dependency>
			<groupId>com.googlecode.charts4j</groupId>
			<artifactId>charts4j</artifactId>
			<version>1.3</version>
		</dependency>
Controller
@RequestMapping("/gcharts")
public class GglPieChart {
	
	@RequestMapping(value = "/piechart", method = RequestMethod.GET)
	public String drawPieChart(ModelMap model)
	{
		Slice s1 = Slice.newSlice(33, Color.newColor("CACACA"), "Mac", "Mac");
		Slice s2 = Slice.newSlice(33, Color.newColor("DF7417"), "Window",
				"Window");
		Slice s3 = Slice.newSlice(33, Color.newColor("951800"), "Linux",
				"Linux");
		Slice s4 = Slice.newSlice(1, Color.newColor("01A1DB"), "Others",
				"Others");

		PieChart pieChart = GCharts.newPieChart(s1, s2, s3, s4);
		pieChart.setTitle("Google Pie Chart", Color.BLACK, 15);
		pieChart.setSize(720, 360);
		pieChart.setThreeD(true);
		
		Plot plot = Plots.newPlot(Data.newData(100, 10, 20, 30, 40, 50, 60, 70, 80, 90));
		//plot.
	       plot.addShapeMarkers(Shape.SQUARE, Color.BLUE, 12);
		
		BarChart barChart = GCharts.newBarChart(plot);
		barChart.setTitle("Muzammil", Color.BLACK, 15);
		barChart.setSize(500, 500);
		barChart.setDataStacked(true);
		model.addAttribute("barUrl", barChart.toURLString());

		model.addAttribute("pieUrl", pieChart.toURLString());
System.out.println("All done");
		return "display";
	}

}
UI:
<img alt="Google Pie Chart" th:attr="src=${pieUrl}"/>
Image:
https://stackoverflow.com/questions/33839309/how-to-show-image-from-h2-database-to-thymeleaf
https://stackoverflow.com/questions/23441527/how-do-i-show-blob-image-tag-on-html-page-using-spring-mvc
http://www.baeldung.com/spring-mvc-image-media-data
=============================================



/*
 * The Alphanum Algorithm is an improved sorting algorithm for strings
 * containing numbers.  Instead of sorting numbers in ASCII order like
 * a standard sort, this algorithm sorts numbers in numeric order.
 *
 * The Alphanum Algorithm is discussed at http://www.DaveKoelle.com
 *
 * Released under the MIT License - https://opensource.org/licenses/MIT
 *
 * Copyright 2007-2017 David Koelle
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

/**
 * This is an updated version with enhancements made by Daniel Migowski,
 * Andre Bogus, and David Koelle. Updated by David Koelle in 2017.
 *
 * To use this class:
 *   Use the static "sort" method from the java.util.Collections class:
 *   Collections.sort(your list, new AlphanumComparator());
 */
public class AlphanumComparator implements Comparator<String>
{
    private final boolean isDigit(char ch)
    {
        return ((ch >= 48) && (ch <= 57));
    }

    /** Length of string is passed in for improved efficiency (only need to calculate it once) **/
    private final String getChunk(String s, int slength, int marker)
    {
        StringBuilder chunk = new StringBuilder();
        char c = s.charAt(marker);
        chunk.append(c);
        marker++;
        if (isDigit(c))
        {
            while (marker < slength)
            {
                c = s.charAt(marker);
                if (!isDigit(c))
                    break;
                chunk.append(c);
                marker++;
            }
        } else
        {
            while (marker < slength)
            {
                c = s.charAt(marker);
                if (isDigit(c))
                    break;
                chunk.append(c);
                marker++;
            }
        }
        return chunk.toString();
    }

    public int compare(String s1, String s2)
    {
    	if ((s1 == null) || (s2 == null)) 
    	{
    		return 0;
    	}

        int thisMarker = 0;
        int thatMarker = 0;
        int s1Length = s1.length();
        int s2Length = s2.length();

        while (thisMarker < s1Length && thatMarker < s2Length)
        {
            String thisChunk = getChunk(s1, s1Length, thisMarker);
            thisMarker += thisChunk.length();

            String thatChunk = getChunk(s2, s2Length, thatMarker);
            thatMarker += thatChunk.length();

            // If both chunks contain numeric characters, sort them numerically
            int result = 0;
            if (isDigit(thisChunk.charAt(0)) && isDigit(thatChunk.charAt(0)))
            {
                // Simple chunk comparison by length.
                int thisChunkLength = thisChunk.length();
                result = thisChunkLength - thatChunk.length();
                // If equal, the first different number counts
                if (result == 0)
                {
                    for (int i = 0; i < thisChunkLength; i++)
                    {
                        result = thisChunk.charAt(i) - thatChunk.charAt(i);
                        if (result != 0)
                        {
                            return result;
                        }
                    }
                }
            } 
            else
            {
                result = thisChunk.compareTo(thatChunk);
            }

            if (result != 0)
                return result;
        }

        return s1Length - s2Length;
    }
    
    /** 
     * Shows an example of how the comparator works. 
     * Feel free to delete this in your own code!
     */
    public static void main(String[] args) {
    	List<String> values = Arrays.asList("dazzle2", "dazzle10", "dazzle1", "dazzle2.7", "dazzle2.10", "2", "10", "1", "EctoMorph6", "EctoMorph62", "EctoMorph7");
    	System.out.println(values.stream().sorted(new AlphanumComparator()).collect(Collectors.joining(" ")));
    }
}
====================
https://wetransfer.com/downloads/8db8aef6799626f55a4e3deb227955b320181023074922/6771fc03db3d58d525781dad9eb34f0020181023074922/28d6a5?utm_campaign=WT_email_tracking&utm_content=general&utm_medium=download_button&utm_source=notify_recipient_email
====================================
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:th="http://www.thymeleaf.org" xmlns:sec="http://www.thymeleaf.org/thymeleaf-extras-springsecurity3">

<head>
<meta charset="utf-8" />
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
<meta name="description" content="muzammil" />
<meta name="author" content="" />
<link rel="icon" href="favicon.ico" />

<title>Schools360</title>

<!-- Bootstrap core CSS -->
<link href="//maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous" />
<link th:href="@{css/style.css}" rel="stylesheet" />
<link th:href="@{css/component.css}" rel="stylesheet" />
<link th:href="@{css/style_grid.css}" rel="stylesheet" />
<link href="//maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" />
<link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
<link th:href="@{css/app.css}" rel="stylesheet" />
<script th:src="@{js/scripts.js}"></script>

<!-- JQuery -->
<script type="text/javascript" src="js/jquery-2.1.4.min.js"></script>

<script type="text/javascript" th:src="@{/js/jquery.autocomplete.js}"></script>
<!-- Compiled and minified JavaScript -->
<script type="text/javascript" th:src="@{/js/materialize.min.js}"></script>
<style>
.fixed-panel {
	min-height: 300px;
	max-height: 300px;
	overflow-y: scroll;
}
</style>


</head>

<body>

	<!-- banner -->
	<div class="wthree_agile_admin_info">
		<div th:replace="fragments/headerinc :: nav"></div>
		<div class="clearfix"></div>
		<!-- //w3_agileits_top_nav-->
		<!-- /inner_content-->
		<div class="inner_content">
			<br> <br>
			<div class="container">
				<div class="agile_info_shadow">
					<div class="alert alert-info">
						<h3>Instructions</h3>
						<br>
						<ol>
							<li>Please download the file template and fill-in the details and upload with the same file name/extensions.</li>
							<li>In the sheet, the yellow color highlighted columns are mandatory while the rest are optional.</li>
							<li>You can upload details all at once or class-wise or any number of entries with minimum as 1 entry.</li>
							<li><strong>If the yellow color column's cell/cells are left blank then,the further rows will not be processed!</strong></li>
						</ol>
					</div>
					<div class="panel panel-primary">
						<div class="panel-heading">
							<span class="lead">Download template</span>
						</div>
						<div class="panel-body">
							<span class="lead">Click here to download the template..</span> <a th:href="@{/download-marksDocument}" class="btn btn-success pull-right">Download</a>
						</div>
					</div>
					<div class="panel panel-primary">

						<div class="panel-heading">
							<span class="lead">Upload Details</span>
						</div>
						<div class="uploadcontainer">
							<form autocomplete="off" action="#" th:action="@{/add-marksDocument}" th:object="${fileBucket}" method="post" class="m-t" role="form" enctype="multipart/form-data" data-toggle="validator">
								<div th:if="${alreadyRegisteredMessage}" class="alert alert-danger" role="alert" th:text="${alreadyRegisteredMessage}"></div>
								<div th:if="${fileTypeErrorMessage}" class="alert alert-danger" role="alert" th:text="${fileTypeErrorMessage}"></div>
								<div th:if="${success}">
									<div class="pull-alert">
										<div class="alert alert-success pull-right">
											<button type="button" class="btn btn-default btn-circle btn-xl-alert btn-lateral btn-float-alert">
												<i class="glyphicon glyphicon-ok"></i>
											</button>
											<strong><strong th:text="${totalStudents}"></strong> student details saved successfully in <strong th:text="${success}"></strong> seconds</strong>
										</div>
									</div>
								</div>
								<div class="row">
									<div class="form-group col-md-12">
										<label class="col-md-3 control-lable" for="file">Upload Student details</label>
										<div class="col-md-7">
											<input type="file" th:field="*{file}" accept="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" id="file" class="form-control input-sm" required />
											<div class="has-error">
												<div class=" help-block with-errors"></div>
											</div>
										</div>
									</div>
								</div>
								<div class="row">
									<div class="form-group col-md-12">
										<label class="col-md-3 control-lable" for="file">Description (Optional)</label>
										<div class="col-md-7">
											<input type="text" th:field="*{description}" id="description" class="form-control input-sm" required />
										</div>

									</div>
								</div>
								<div class="row">
									<div class="form-group col-md-12">
										<label class="col-md-3 control-lable" for="std">Class</label> 
										<div class="col-md-7">
										<select class="form-control input-sm" required="required" th:field="*{std}" name="std" id="std" required>
											<option th:value="NA">-- Select Class --</option>
											<option th:each="dropDownItem : ${standards}" th:value="${dropDownItem.key}" th:text="${dropDownItem.value}" />
										</select>
										</div>
									</div>
								</div>

								<div class="row">
									<div class="form-group col-md-12">
										<label class="col-md-3 control-lable" for="section">Sec</label>
										<div class="col-md-7"> 
										<select class="form-control input-sm" th:field="*{sec}" name="sec" id="sec" required>
											<option th:value="NA">-- Select Section --</option>
										</select>
										</div>
									</div>
								</div>

								<div class="row">
									<div class="form-actions floatRight">
										<input type="submit" value="Upload" onclick="waitingDialog.show('Validating and uploading the data..Please do not refresh..');" class="btn btn-primary btn-sm">
									</div>
								</div>



							</form>
						</div>
					</div>
				</div>
			</div>
		</div>
		<!-- //inner_content-->
	</div>
	<!-- banner -->
	<br>
	<br>
	<br>
	<br>
	<br>
	<br>
	<br>
	<br>
	<br>
	<br>
	<br>
	<br>
	<br>
	<br>
	<br>
	<br>
	<br>
	<br>
	<br>
	<br>
	<br>
	<br>
	<br>
	<br>
	<br>
	<br>
	<br>
	<br>
	<form name="logoutForm" th:action="@{/logout}" method="post" th:hidden="true">
		<input hidden type="submit" value="Sign Out" />
	</form>
	<!--copy rights start here-->
	<div>
		<br>
	</div>
	<div class="copyrights">
		© 2018 Schools360. All Rights Reserved | Design by <a href="http://epyloc.com/" target="_blank">epyloc</a>
	</div>
	<!--copy rights end here-->
	<!-- js -->
	<script th:src="@{js/classie.js}"></script>
	<script th:src="@{js/gnmenu.js}"></script>
	<script>
		new gnMenu(document.getElementById('gn-menu'));
	</script>
	<script th:src="@{js/screenfull.js}"></script>

	<script>
		$(function() {
			$('#supported').text('Supported/allowed: ' + !!screenfull.enabled);
			if (!screenfull.enabled) {
				return false;
			}
			$('#toggle').click(function() {
				screenfull.toggle($('#container')[0]);
			});
		});
	</script>
	<script th:src="@{js/bars.js}"></script>
	<script th:src="@{js/jquery.nicescroll.js}"></script>

	<!-- Bootstrap -->
	<script src="//maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
	<!-- Bootstrap Validator plugin -->
	<script th:src="@{/js/validator.min.js}"></script>
	<script type="text/javascript">
		var waitingDialog = waitingDialog
				|| (function($) {
					'use strict';

					// Creating modal dialog's DOM
					var $dialog = $('<div class="modal fade" data-backdrop="static" data-keyboard="false" tabindex="-1" role="dialog" aria-hidden="true" style="padding-top:15%; overflow-y:visible;">'
							+ '<div class="modal-dialog modal-m">'
							+ '<div class="modal-content">'
							+ '<div class="modal-header"><h3 style="margin:0;"></h3></div>'
							+ '<div class="modal-body">'
							+ '<div class="progress progress-striped active" style="margin-bottom:0;"><div class="progress-bar" style="width: 100%"></div></div>'
							+ '</div>' + '</div></div></div>');

					return {
						/**
						 * Opens our dialog
						 * @param message Custom message
						 * @param options Custom options:
						 * 				  options.dialogSize - bootstrap postfix for dialog size, e.g. "sm", "m";
						 * 				  options.progressType - bootstrap postfix for progress bar type, e.g. "success", "warning".
						 */
						show : function(message, options) {
							// Assigning defaults
							if (typeof options === 'undefined') {
								options = {};
							}
							if (typeof message === 'undefined') {
								message = 'Loading';
							}
							var settings = $.extend({
								dialogSize : 'm',
								progressType : '',
								onHide : null
							// This callback runs after the dialog was hidden
							}, options);

							// Configuring dialog
							$dialog.find('.modal-dialog').attr('class',
									'modal-dialog').addClass(
									'modal-' + settings.dialogSize);
							$dialog.find('.progress-bar').attr('class',
									'progress-bar');
							if (settings.progressType) {
								$dialog
										.find('.progress-bar')
										.addClass(
												'progress-bar-'
														+ settings.progressType);
							}
							$dialog.find('h3').text(message);
							// Adding callbacks
							if (typeof settings.onHide === 'function') {
								$dialog.off('hidden.bs.modal').on(
										'hidden.bs.modal', function(e) {
											settings.onHide.call($dialog);
										});
							}
							// Opening dialog
							$dialog.modal();
						},
						/**
						 * Closes dialog
						 */
						hide : function() {
							$dialog.modal('hide');
						}
					};

				})(jQuery);
	</script>
	<script>
	$('#std').change(
			function() {

				if ($('#std').val() == 'NA') {
					alert("Please submit standard!");
					return;
				}
				$('#sec').empty();
				$('#name').empty();

				$.getJSON("/getSecByStd", {
					std : $(this).val(),
					ajax : 'true'
				}, function(data) {
					var html = '<option value="NA">--Sec--</option>';
					var len = data.length;
					for (var i = 0; i < len; i++) {
						html += '<option value="' + data[i] + '">'
								+ data[i] + '</option>';
					}
					html += '</option>';
					$('#sec').html(html);
				});
			});
	</script>
</body>
</html>

	Plot plot = Plots.newPlot(Data.newData(100, 10, 20, 30, 40, 50, 60, 70, 80, 90));
		
		BarChart barChart = GCharts.newBarChart(plot);
		barChart.setTitle("Muzammil", Color.BLACK, 15);
		barChart.setSize(600, 450);
		barChart.setBarWidth(35);
		AxisStyle axisStyle = AxisStyle.newAxisStyle(Color.BLACK, 13,
				AxisTextAlignment.CENTER);
		AxisLabels year = AxisLabelsFactory.newAxisLabels("Year","Year","Year","Year","Year","Year","Year","Year","Year","Year");
		year.setAxisStyle(axisStyle);
		barChart.addXAxisLabels(year);
		barChart.setSpaceWithinGroupsOfBars(20);
		barChart.setDataStacked(true);
		LinearGradientFill fill = Fills.newLinearGradientFill(0, Color.LAVENDER, 100);
		barChart.setBackgroundFill(fill);
		model.addAttribute("barUrl", barChart.toURLString());
