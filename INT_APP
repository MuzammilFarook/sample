
package com.muzam.MyWorld.web.controller;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.SessionAttributes;

import com.muzam.MyWorld.web.command.DPCStatusCommandForm;

/**
 * Annotation-driven <em>MultiActionController</em> that handles all non-form
 * URLs.
 *
 * @author Java RA
 */
@Controller
@SessionAttributes("dPCStatusCommandForm")
public class DPCController {
	@SuppressWarnings("resource")
	@RequestMapping("/dpcstatus")
	public String dpcStatus(@ModelAttribute("dPCStatusCommandForm") DPCStatusCommandForm dPCStatusCommandForm) throws FileNotFoundException {
		BufferedReader br = null;
		String line;
		int count = 0;
		int successFullyProcessedDeals = 0;
		int failedDeals = 0;
		List<String> allProcessedDeals = new ArrayList<String>();
		List<String> failedDealsList = new ArrayList<String>();
		List<String> succeededDealsList = new ArrayList<String>();
		Map<String,String> timeTaken = new LinkedHashMap<String, String>();
		List<String> allProcessedDealstemp = null;
		try {
			br = new BufferedReader(new FileReader(dPCStatusCommandForm.getFileName().toString()));
			while ((line = br.readLine()) != null) {
				if (line.contains("TIME TAKEN FOR this thread to process Deal:") || line.contains("Error during  processing dealId:")) {
					if (line.contains("TIME TAKEN FOR this thread to process Deal:")) {
						successFullyProcessedDeals = successFullyProcessedDeals + 1;
						String temp = line.substring(line.lastIndexOf("Deal: ") + 6, line.length());
						String[] split = temp.split(" time :");
						if (split[0].length() <= 2) {
							allProcessedDeals.add("0" + split[0]);
						} else {
							allProcessedDeals.add(split[0]);
						}
						allProcessedDealstemp = new ArrayList<String>(allProcessedDeals);
						timeTaken.put("Deal "+split[0]+"  ", split[1]);
					}
					if (line.contains("Error during  processing dealId:")) {
						failedDeals = failedDeals + 1;
						String temp = line.substring(line.lastIndexOf("dealId:") + 7, line.length());
						if (temp.length() <= 2) {
							failedDealsList.add("0" + temp);
						} else {
							failedDealsList.add(temp);
						}
					}
				}
				
				if(count==0 && line.contains("Total Deals to process:")){
					System.out.println("only once");
					String key = "Total Deals to process:";
					dPCStatusCommandForm.setEligibleDeals(Integer.parseInt(line.substring(line.lastIndexOf(key)+key.length(), line.length())));
					count = count +1;
				}
			}
			successFullyProcessedDeals = successFullyProcessedDeals - failedDeals;
			dPCStatusCommandForm.setSuccessFullyProcessedDeals(successFullyProcessedDeals);
			dPCStatusCommandForm.setFailedDeals(failedDeals);
			dPCStatusCommandForm.setAllProcessedDeals(allProcessedDeals);
			dPCStatusCommandForm.setPendingDeals(dPCStatusCommandForm.getEligibleDeals()-dPCStatusCommandForm.getAllProcessedDeals().size());
			dPCStatusCommandForm.setFailedDealsList(failedDealsList);
			allProcessedDealstemp.removeAll(failedDealsList);
			String suceededDeals = allProcessedDealstemp.toString();
			succeededDealsList = Arrays.asList(suceededDeals.split(","));
			dPCStatusCommandForm.setSucceededDealsList(succeededDealsList);
			dPCStatusCommandForm.setTimeTaken(timeTaken);
		} catch (IOException e) {
			System.out.println("in catch");
			e.printStackTrace();
		}
		return "welcome";
	}
	
	@RequestMapping("/index")
	public String index(Model model){
		try {
			model.addAttribute("dPCStatusCommandForm",new DPCStatusCommandForm());
		}catch (Exception e) {
			e.printStackTrace();
		}
		return "index";
	}
	
	@RequestMapping("/timetaken")
	public String timetaken(@ModelAttribute("dPCStatusCommandForm") DPCStatusCommandForm dPCStatusCommandForm){
		try {
		} catch (Exception e) {
			e.printStackTrace();
		}
		return "timetaken";
	}
	
	
	@RequestMapping("/eligibledeals")
	public String eligibledeals(@ModelAttribute("dPCStatusCommandForm") DPCStatusCommandForm dPCStatusCommandForm){
		try {
		} catch (Exception e) {
			e.printStackTrace();
		}
		return "eligibledeals";
	}
	
	@RequestMapping("/successfuldeals")
	public String successfuldeals(@ModelAttribute("dPCStatusCommandForm") DPCStatusCommandForm dPCStatusCommandForm){
		try {
		} catch (Exception e) {
			e.printStackTrace();
		}
		return "successfuldeals";
	}
	
	@RequestMapping("/faileddeals")
	public String faileddeals(@ModelAttribute("dPCStatusCommandForm") DPCStatusCommandForm dPCStatusCommandForm){
		try {
		} catch (Exception e) {
			e.printStackTrace();
		}
		return "faileddeals";
	}
	
	@RequestMapping("/muzam")
	public String muzam(Model model){
		try {
			model.addAttribute("dPCStatusCommandForm",new DPCStatusCommandForm());
		}catch (Exception e) {
			e.printStackTrace();
		}
		return "index";
	}
	
	
}
