<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-webflux</artifactId>
</dependency>

keycloak:
  token-url: https://keycloak.example.com/auth/realms/yourrealm/protocol/openid-connect/token
  client-id: your-client-id
  client-secret: your-secret

@Service
public class KeycloakTokenService {

    private final KeycloakProperties keycloakProperties;

    @Autowired
    public KeycloakTokenService(KeycloakProperties keycloakProperties) {
        this.keycloakProperties = keycloakProperties;
    }

    public String getAccessToken() {
        WebClient webClient = WebClient.create();

        Map<String, String> form = Map.of(
            "grant_type", "client_credentials",
            "client_id", keycloakProperties.getClientId(),
            "client_secret", keycloakProperties.getClientSecret()
        );

        return webClient.post()
            .uri(keycloakProperties.getTokenUrl())
            .contentType(MediaType.APPLICATION_FORM_URLENCODED)
            .bodyValue(form.entrySet().stream()
                .map(e -> e.getKey() + "=" + e.getValue())
                .collect(Collectors.joining("&"))
            )
            .retrieve()
            .bodyToMono(Map.class)
            .map(resp -> (String) resp.get("access_token"))
            .block();
    }
}

// src/main/java/com/example/config/KeycloakProperties.java

@ConfigurationProperties(prefix = "keycloak")
@Data // (Lombok) or generate getters/setters
public class KeycloakProperties {
    private String tokenUrl;
    private String clientId;
    private String clientSecret;
}

@Service
public class CollateApiOrchestrator {

    private final KeycloakTokenService tokenService;
    private final CollateApiClient collateApiClient;

    @Autowired
    public CollateApiOrchestrator(KeycloakTokenService tokenService, CollateApiClient collateApiClient) {
        this.tokenService = tokenService;
        this.collateApiClient = collateApiClient;
    }

    public ResponseEntity<String> sendToCollate(Map<String, Object> payload) {
        String token = tokenService.getAccessToken();
        String bearerToken = "Bearer " + token;
        return collateApiClient.callCollateApi(bearerToken, payload);
    }
}

@FeignClient(name = "collateApi", url = "${collate.api.url}")
public interface CollateApiClient {
    @PostMapping("/your-collate-endpoint")
    ResponseEntity<String> callCollateApi(
        @RequestHeader("Authorization") String bearerToken,
        @RequestBody Map<String, Object> payload
    );
}
